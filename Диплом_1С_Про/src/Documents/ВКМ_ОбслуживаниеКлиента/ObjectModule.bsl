// @strict-types

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	//Если новый документ, то создаем запись в справочнике ВКМ_УведомленияТелеграмБоту
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда  
		
		Сообщение = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		Сообщение.ТекстСообщения = СтрШаблон("Создан новый документ Обслуживание клиента № %1, дата %2", 
		Номер, Дата);
		Сообщение.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,Режим)
	
	// регистр ВыполненныеКлиентуРаботы, ВыполненныеСотрудником работы
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина; 
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.ВКМ_ДатаНачалаДействияДоговора КАК ВКМ_ДатаНачалаДействияДоговора,
	|	ДоговорыКонтрагентов.ВКМ_ДатаОкончанияДействияДоговора КАК ВКМ_ДатаОкончанияДействияДоговора,
	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы КАК ВКМ_СтоимостьЧасаРаботы,
	|	ВКМ_УсловияОплатыСотрудников.ПроцентОтРабот КАК ПроцентОтРабот
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВКМ_ОбслуживаниеКлиента.Договор = ДоговорыКонтрагентов.Ссылка,
	|	РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_УсловияОплатыСотрудников
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
	|	И ВКМ_УсловияОплатыСотрудников.Сотрудник = &Специалист";
	
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание);  
	Запрос.УстановитьПараметр("Ссылка", Ссылка);  
	Запрос.УстановитьПараметр("Специалист", Специалист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Сообщить("Нет данных о специалисте, или не указан абонентский договор");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Дата >= ВыборкаДетальныеЗаписи.ВКМ_ДатаНачалаДействияДоговора И
			Дата <= ВыборкаДетальныеЗаписи.ВКМ_ДатаОкончанияДействияДоговора Тогда
			
			Для Каждого ТекСтрокаВыполненныеРаботы из ВыполненныеРаботы Цикл
				
				// регистр ВКМ_ВыполненныеКлиентуРаботы Расход	
				
				Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
				Движение.Период = Дата;
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Клиент = Клиент;
				Движение.Договор = Договор;
				Движение.КоличествоЧасов = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
				Движение.СуммаКОплате = 
				ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту * ВыборкаДетальныеЗаписи.ВКМ_СтоимостьЧасаРаботы;
				
				// регистр ВКМ_ВыполненныеСотрудникомРаботы приход
				
				Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				Движение.Сотрудник = Специалист;
				Движение.ЧасовКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
				Движение.СуммаКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту * ВыборкаДетальныеЗаписи.ВКМ_СтоимостьЧасаРаботы 
				* ВыборкаДетальныеЗаписи.ПроцентОтРабот / 100;
				
			КонецЦикла;
			
		Иначе
			
			Сообщить("Истек срок обслуживания абонента");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;

	    Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать();
		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записать(); 
		
	КонецЦИкла;
	
КонецПроцедуры

#КонецОбласти